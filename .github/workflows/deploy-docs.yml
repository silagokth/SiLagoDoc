name: deploy-docs
on:
  push:
    branches:
      - master
      - main
  schedule:
    - cron: '0 3 * * 1' # every monday at 3am

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Cache MkDocs build cache
      - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV
      - uses: actions/cache@v3
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-

      # Cache the Python virtual environment
      - name: Cache Python venv
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-
            # Cache Graphviz binaries

      # Cache Graphviz binaries
      - name: Cache Graphviz
        uses: actions/cache@v3
        with:
          path: .graphviz
          key: graphviz-${{ runner.os }}-14.0.1

      # Download and extract Graphviz if not cached
      - name: Download Graphviz
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p .graphviz
          curl -L -o graphviz.tar.gz https://gitlab.com/api/v4/projects/4207231/packages/generic/graphviz-releases/14.0.1/graphviz-14.0.1.tar.gz
          expected_sha256="647e7d6aa60158347d3537aef16415a07b71be86c80df84a49dcafd398f54e76"
          actual_sha256=$(sha256sum graphviz.tar.gz | awk '{print $1}')
          if [ "$actual_sha256" != "$expected_sha256" ]; then
            echo "SHA256 mismatch! Expected $expected_sha256 but got $actual_sha256"
            exit 1
          fi
          tar -xzf graphviz.tar.gz -C .graphviz --strip-components=1
          rm graphviz.tar.gz

      # Create and activate the venv if it doesn't exist
      - name: Set up Python virtual environment
        run: |
          if [ ! -d ".venv" ]; then
            python -m venv .venv
          fi
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Use the venv to build the docs
      - name: Build documentation
        run: |
          source .venv/bin/activate
          echo "${GITHUB_WORKSPACE}/.graphviz/bin" >> $GITHUB_PATH
          mkdocs build

      - name: Deploy to cheddar
        uses: appleboy/scp-action@v0.1.7
        with:
          host: cheddar.ict.kth.se
          username: doc-generator
          key: ${{ secrets.CHEDDAR_WWW_KEY }}
          strip_components: 1
          source: "site/*"
          target: /var/www/cheddar.ict.kth.se/docs
